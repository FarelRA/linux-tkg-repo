name: Build Ubuntu kernel
permissions: write-all

on:
  workflow_call:
    inputs:
      type:
        required: true
        type: string
      _cpusched:
        required: false
        type: string

  workflow_dispatch: # on button click
      inputs:
        type:
          required: true
          type: string
        _cpusched:
          required: false
          type: string

env:
  _waydroid: "true"
  _processor_opt: "generic"
  _distro: "Ubuntu"
  _git_mirror: "github.com"
  _logging_use_script: "no"
  _install_after_building: "no"
  _debugdisable: "true"
  _noccache: "true"
  _STRIP: "true"
  _ftracedisable: "true"
  _kernel_on_diet: "true"
  _kernel_work_folder: "/tmp"
  _kernel_source_folder: "/tmp"
  # _modprobeddb: "true"
  _modprobeddb_db_path: ${{ github.workspace }}/modprobed.db

  
jobs:
  build-kernel:
    env:
      _cpusched: ${{ inputs._cpusched }}

    if: inputs.type == 'build'
    runs-on: ubuntu-latest

    steps:
      - name: Checkount linux-tkg
        uses: actions/checkout@v4.1.7
        with:
          repository: 'Frogging-Family/linux-tkg'

      # - name: "[debug] make dummy modprobed-db file for faster ci"
      #   run: |
      #     touch "${_modprobeddb_db_path}"
      #     echo "${_modprobeddb_db_path}"

      - name: Install deps and compile kernel
        run: |
          sudo apt update
          yes '' | ./install.sh install
        # run: |
        #   mkdir -p "$PKGDEST"
        #   echo "test" > "$PKGDEST"/linux-$_cpusched.pkg.tar.zst

      - name: Cleanup useless DEB files
        run: rm -rf DEBS/*dbg*.deb DEBS/*libc-dev*.deb

      - name: rename kernel config
        run: mv kernelconfig.new kernelconfig.ubuntu.${{ env._cpusched }}.txt

      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-kernel-packages-${{ env._cpusched }}
          path: |
            ${{ github.workspace }}/DEBS/*.deb
            ${{ github.workspace }}/kernelconfig*.txt

  build-database:
    env:
      ubuntu_repo_dir: "debian/main/x86_64"
      ubuntu_packages_file: "debian/main/x86_64/Packages"
      ubuntu_release_file: "debian/main/x86_64/Release"
      ubuntu_inrelease_file: "debian/main/x86_64/InRelease"
    
    if: inputs.type == 'database'
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: sudo apt-get install -y dpkg-dev gpg

      - name: Checkount linux-tkg-repo
        uses: actions/checkout@v4.1.7

      - name: Post checkuot setup
        run: |
          git config --global --add safe.directory `pwd`
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull --rebase

      # (Temporaly disable ubuntu repo signing)
      #- name: Import GPG key
      #  uses: crazy-max/ghaction-import-gpg@v6
      #  with:
      #    gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #    passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Update package list database
        run: |
          # Generate the Packages file
          dpkg-scanpackages "./${{ env.ubuntu_repo_dir }}" /dev/null > "./${{ env.ubuntu_packages_file }}" || {
            echo "Error generating Packages file!" >&2
            exit 1
          }
          gzip -k -f -9 "./${{ env.ubuntu_packages_file }}" || {
            echo "Error compressing Packages file!" >&2
            exit 1
          }
        
          # Generate the Release file
          # Optional configuration information
          cp ./.github/distributions "./${{ env.ubuntu_release_file }}" && \
          echo -e "Date: $(LANG=C date -Ru)" >> "./${{ env.ubuntu_release_file }}" || {
            echo "Warning: There is no `distributions` file" >&2
          }
        
          # Calculate and add checksums
          calculate_checksums() {
            local checksum_type="$1"
            local checksum_file="$2"
            local checksum=$("$checksum_type" "$checksum_file" | cut -d' ' -f1)
            local file_size=$(wc -c "$checksum_file" | cut -d' ' -f1)
            printf " %s %16d %s\n" "$checksum" "$file_size" "$checksum_file" >> "./${{ env.ubuntu_release_file }}"
          }
        
          calculate_checksums "md5sum" "./${{ env.ubuntu_packages_file }}.gz"
          calculate_checksums "md5sum" "./${{ env.ubuntu_packages_file }}"
          calculate_checksums "sha256sum" "./${{ env.ubuntu_packages_file }}.gz"
          calculate_checksums "sha256sum" "./${{ env.ubuntu_packages_file }}"

          # (Temporaly disable ubuntu repo signing)
          ## Clearsign the Release file
          #rm -f ${{ env.ubuntu_inrelease_file }}
          #gpg --batch --clearsign --digest-algo SHA512 -o "${{ env.ubuntu_inrelease_file }}" "${{ env.ubuntu_release_file }}" || {
          #  echo "Error signing Release file!" >&2
          #}
        
      - name: Commit updated package list database
        run: |
          git add .
          git commit -m "Push updated package list database"
          git pull --rebase
          git push